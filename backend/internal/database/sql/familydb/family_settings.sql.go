// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: family_settings.sql

package familydb

import (
	"context"
)

const createFamilySetting = `-- name: CreateFamilySetting :one
INSERT INTO family_settings (setting_key, setting_value, data_type)
VALUES (?, ?, ?)
RETURNING id, setting_key, setting_value, data_type
`

type CreateFamilySettingParams struct {
	SettingKey   string  `json:"setting_key"`
	SettingValue *string `json:"setting_value"`
	DataType     string  `json:"data_type"`
}

func (q *Queries) CreateFamilySetting(ctx context.Context, arg CreateFamilySettingParams) (*FamilySetting, error) {
	row := q.db.QueryRowContext(ctx, createFamilySetting, arg.SettingKey, arg.SettingValue, arg.DataType)
	var i FamilySetting
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
	)
	return &i, err
}

const deleteFamilySetting = `-- name: DeleteFamilySetting :exec
DELETE FROM family_settings WHERE id = ?
`

func (q *Queries) DeleteFamilySetting(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFamilySetting, id)
	return err
}

const listFamilySettings = `-- name: ListFamilySettings :many
SELECT id, setting_key, setting_value, data_type FROM family_settings
`

func (q *Queries) ListFamilySettings(ctx context.Context) ([]*FamilySetting, error) {
	rows, err := q.db.QueryContext(ctx, listFamilySettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FamilySetting{}
	for rows.Next() {
		var i FamilySetting
		if err := rows.Scan(
			&i.ID,
			&i.SettingKey,
			&i.SettingValue,
			&i.DataType,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFamilySetting = `-- name: UpdateFamilySetting :one
UPDATE family_settings
SET setting_value = ?, data_type = ?
WHERE id = ?
RETURNING id, setting_key, setting_value, data_type
`

type UpdateFamilySettingParams struct {
	SettingValue *string `json:"setting_value"`
	DataType     string  `json:"data_type"`
	ID           int64   `json:"id"`
}

func (q *Queries) UpdateFamilySetting(ctx context.Context, arg UpdateFamilySettingParams) (*FamilySetting, error) {
	row := q.db.QueryRowContext(ctx, updateFamilySetting, arg.SettingValue, arg.DataType, arg.ID)
	var i FamilySetting
	err := row.Scan(
		&i.ID,
		&i.SettingKey,
		&i.SettingValue,
		&i.DataType,
	)
	return &i, err
}
