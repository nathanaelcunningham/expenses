// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: family_members.sql

package familydb

import (
	"context"
	"time"
)

const createFamilyMember = `-- name: CreateFamilyMember :one
INSERT INTO family_members (id, name, email, role, joined_at, is_active)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, name, email, role, joined_at, is_active
`

type CreateFamilyMemberParams struct {
	ID       int64     `json:"id"`
	Name     string    `json:"name"`
	Email    string    `json:"email"`
	Role     string    `json:"role"`
	JoinedAt time.Time `json:"joined_at"`
	IsActive *bool     `json:"is_active"`
}

func (q *Queries) CreateFamilyMember(ctx context.Context, arg CreateFamilyMemberParams) (*FamilyMember, error) {
	row := q.db.QueryRowContext(ctx, createFamilyMember,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.JoinedAt,
		arg.IsActive,
	)
	var i FamilyMember
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.JoinedAt,
		&i.IsActive,
	)
	return &i, err
}

const deactivateFamilyMember = `-- name: DeactivateFamilyMember :exec
UPDATE family_members 
SET is_active = FALSE
WHERE id = ?
`

func (q *Queries) DeactivateFamilyMember(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deactivateFamilyMember, id)
	return err
}

const deleteFamilyMember = `-- name: DeleteFamilyMember :exec
DELETE FROM family_members WHERE id = ?
`

func (q *Queries) DeleteFamilyMember(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteFamilyMember, id)
	return err
}

const getFamilyMemberByEmail = `-- name: GetFamilyMemberByEmail :one
SELECT id, name, email, role, joined_at, is_active FROM family_members WHERE email = ?
`

func (q *Queries) GetFamilyMemberByEmail(ctx context.Context, email string) (*FamilyMember, error) {
	row := q.db.QueryRowContext(ctx, getFamilyMemberByEmail, email)
	var i FamilyMember
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.JoinedAt,
		&i.IsActive,
	)
	return &i, err
}

const getFamilyMemberByID = `-- name: GetFamilyMemberByID :one
SELECT id, name, email, role, joined_at, is_active FROM family_members WHERE id = ?
`

func (q *Queries) GetFamilyMemberByID(ctx context.Context, id int64) (*FamilyMember, error) {
	row := q.db.QueryRowContext(ctx, getFamilyMemberByID, id)
	var i FamilyMember
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.JoinedAt,
		&i.IsActive,
	)
	return &i, err
}

const listAllFamilyMembers = `-- name: ListAllFamilyMembers :many
SELECT id, name, email, role, joined_at, is_active FROM family_members ORDER BY name ASC
`

func (q *Queries) ListAllFamilyMembers(ctx context.Context) ([]*FamilyMember, error) {
	rows, err := q.db.QueryContext(ctx, listAllFamilyMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FamilyMember{}
	for rows.Next() {
		var i FamilyMember
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.JoinedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFamilyMembers = `-- name: ListFamilyMembers :many
SELECT id, name, email, role, joined_at, is_active FROM family_members 
WHERE is_active = TRUE
ORDER BY name ASC
`

func (q *Queries) ListFamilyMembers(ctx context.Context) ([]*FamilyMember, error) {
	rows, err := q.db.QueryContext(ctx, listFamilyMembers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FamilyMember{}
	for rows.Next() {
		var i FamilyMember
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.JoinedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFamilyMember = `-- name: UpdateFamilyMember :one
UPDATE family_members 
SET name = ?, email = ?, role = ?
WHERE id = ?
RETURNING id, name, email, role, joined_at, is_active
`

type UpdateFamilyMemberParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	Role  string `json:"role"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateFamilyMember(ctx context.Context, arg UpdateFamilyMemberParams) (*FamilyMember, error) {
	row := q.db.QueryRowContext(ctx, updateFamilyMember,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.ID,
	)
	var i FamilyMember
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.JoinedAt,
		&i.IsActive,
	)
	return &i, err
}
