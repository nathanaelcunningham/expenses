// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: expenses.sql

package familydb

import (
	"context"
	"time"
)

const countExpenses = `-- name: CountExpenses :one
SELECT COUNT(*) FROM expenses
`

func (q *Queries) CountExpenses(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countExpenses)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (category_id, amount, name, day_of_month_due, is_autopay, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, category_id, amount, name, day_of_month_due, is_autopay, created_at, updated_at
`

type CreateExpenseParams struct {
	CategoryID    *int64    `json:"category_id"`
	Amount        float64   `json:"amount"`
	Name          string    `json:"name"`
	DayOfMonthDue int64     `json:"day_of_month_due"`
	IsAutopay     bool      `json:"is_autopay"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (*Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense,
		arg.CategoryID,
		arg.Amount,
		arg.Name,
		arg.DayOfMonthDue,
		arg.IsAutopay,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Amount,
		&i.Name,
		&i.DayOfMonthDue,
		&i.IsAutopay,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses WHERE id = ?
`

func (q *Queries) DeleteExpense(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const getExpenseByID = `-- name: GetExpenseByID :one
SELECT id, category_id, amount, name, day_of_month_due, is_autopay, created_at, updated_at FROM expenses WHERE id = ?
`

func (q *Queries) GetExpenseByID(ctx context.Context, id int64) (*Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpenseByID, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Amount,
		&i.Name,
		&i.DayOfMonthDue,
		&i.IsAutopay,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getExpensesByDateRange = `-- name: GetExpensesByDateRange :many
SELECT id, category_id, amount, name, day_of_month_due, is_autopay, created_at, updated_at FROM expenses
WHERE day_of_month_due BETWEEN ? AND ?
ORDER BY day_of_month_due ASC
`

type GetExpensesByDateRangeParams struct {
	FromDayOfMonthDue int64 `json:"from_day_of_month_due"`
	ToDayOfMonthDue   int64 `json:"to_day_of_month_due"`
}

func (q *Queries) GetExpensesByDateRange(ctx context.Context, arg GetExpensesByDateRangeParams) ([]*Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpensesByDateRange, arg.FromDayOfMonthDue, arg.ToDayOfMonthDue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Amount,
			&i.Name,
			&i.DayOfMonthDue,
			&i.IsAutopay,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExpenses = `-- name: ListExpenses :many
SELECT id, category_id, amount, name, day_of_month_due, is_autopay, created_at, updated_at FROM expenses 
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListExpensesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListExpenses(ctx context.Context, arg ListExpensesParams) ([]*Expense, error) {
	rows, err := q.db.QueryContext(ctx, listExpenses, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Amount,
			&i.Name,
			&i.DayOfMonthDue,
			&i.IsAutopay,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExpensesByCategory = `-- name: ListExpensesByCategory :many
SELECT id, category_id, amount, name, day_of_month_due, is_autopay, created_at, updated_at FROM expenses 
WHERE category_id = ?
ORDER BY created_at DESC
`

func (q *Queries) ListExpensesByCategory(ctx context.Context, categoryID *int64) ([]*Expense, error) {
	rows, err := q.db.QueryContext(ctx, listExpensesByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Expense{}
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.Amount,
			&i.Name,
			&i.DayOfMonthDue,
			&i.IsAutopay,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expenses 
SET category_id = ?, amount = ?, name = ?, day_of_month_due = ?, is_autopay = ?, updated_at = ?
WHERE id = ?
RETURNING id, category_id, amount, name, day_of_month_due, is_autopay, created_at, updated_at
`

type UpdateExpenseParams struct {
	CategoryID    *int64    `json:"category_id"`
	Amount        float64   `json:"amount"`
	Name          string    `json:"name"`
	DayOfMonthDue int64     `json:"day_of_month_due"`
	IsAutopay     bool      `json:"is_autopay"`
	UpdatedAt     time.Time `json:"updated_at"`
	ID            int64     `json:"id"`
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (*Expense, error) {
	row := q.db.QueryRowContext(ctx, updateExpense,
		arg.CategoryID,
		arg.Amount,
		arg.Name,
		arg.DayOfMonthDue,
		arg.IsAutopay,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Amount,
		&i.Name,
		&i.DayOfMonthDue,
		&i.IsAutopay,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
