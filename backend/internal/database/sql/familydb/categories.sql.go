// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package familydb

import (
	"context"
	"time"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (id, name, description, color, icon, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, description, color, icon, created_at, updated_at
`

type CreateCategoryParams struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	Color       *string   `json:"color"`
	Icon        *string   `json:"icon"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (*Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Color,
		arg.Icon,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategoryByID = `-- name: GetCategoryByID :one
SELECT id, name, description, color, icon, created_at, updated_at FROM categories WHERE id = ?
`

func (q *Queries) GetCategoryByID(ctx context.Context, id string) (*Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByID, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, description, color, icon, created_at, updated_at FROM categories ORDER BY name ASC
`

func (q *Queries) ListCategories(ctx context.Context) ([]*Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Color,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories 
SET name = ?, description = ?, color = ?, icon = ?, updated_at = ?
WHERE id = ?
RETURNING id, name, description, color, icon, created_at, updated_at
`

type UpdateCategoryParams struct {
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	Color       *string   `json:"color"`
	Icon        *string   `json:"icon"`
	UpdatedAt   time.Time `json:"updated_at"`
	ID          string    `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (*Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.Name,
		arg.Description,
		arg.Color,
		arg.Icon,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Color,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
