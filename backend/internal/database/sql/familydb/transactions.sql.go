// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package familydb

import (
	"context"
	"time"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (account_id,name,simplefin_id)
VALUES (?,?,?)
RETURNING id, account_id, name, simplefin_id
`

type CreateAccountParams struct {
	AccountID   string `json:"account_id"`
	Name        string `json:"name"`
	SimplefinID int64  `json:"simplefin_id"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (*Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.AccountID, arg.Name, arg.SimplefinID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Name,
		&i.SimplefinID,
	)
	return &i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (account_id,posted_date,description,payee)
VALUES (?,?,?,?)
RETURNING id, account_id, posted_date, description, payee
`

type CreateTransactionParams struct {
	AccountID   int64     `json:"account_id"`
	PostedDate  time.Time `json:"posted_date"`
	Description string    `json:"description"`
	Payee       string    `json:"payee"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (*Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.AccountID,
		arg.PostedDate,
		arg.Description,
		arg.Payee,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PostedDate,
		&i.Description,
		&i.Payee,
	)
	return &i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts where id = ?
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, account_id, name, simplefin_id FROM accounts
`

func (q *Queries) GetAccounts(ctx context.Context) ([]*Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Name,
			&i.SimplefinID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByAccount = `-- name: GetTransactionsByAccount :many
SELECT id, account_id, posted_date, description, payee FROM transactions WHERE account_id = ?
`

func (q *Queries) GetTransactionsByAccount(ctx context.Context, accountID int64) ([]*Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.PostedDate,
			&i.Description,
			&i.Payee,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
