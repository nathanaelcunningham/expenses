// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: family_memberships.sql

package masterdb

import (
	"context"
	"time"
)

const createFamilyMembership = `-- name: CreateFamilyMembership :one
INSERT INTO family_memberships (family_id, user_id, role, joined_at)
VALUES (?, ?, ?, ?)
RETURNING family_id, user_id, role, joined_at
`

type CreateFamilyMembershipParams struct {
	FamilyID *string   `json:"family_id"`
	UserID   *string   `json:"user_id"`
	Role     string    `json:"role"`
	JoinedAt time.Time `json:"joined_at"`
}

func (q *Queries) CreateFamilyMembership(ctx context.Context, arg CreateFamilyMembershipParams) (*FamilyMembership, error) {
	row := q.db.QueryRowContext(ctx, createFamilyMembership,
		arg.FamilyID,
		arg.UserID,
		arg.Role,
		arg.JoinedAt,
	)
	var i FamilyMembership
	err := row.Scan(
		&i.FamilyID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return &i, err
}

const deleteFamilyMembership = `-- name: DeleteFamilyMembership :exec
DELETE FROM family_memberships WHERE family_id = ? AND user_id = ?
`

type DeleteFamilyMembershipParams struct {
	FamilyID *string `json:"family_id"`
	UserID   *string `json:"user_id"`
}

func (q *Queries) DeleteFamilyMembership(ctx context.Context, arg DeleteFamilyMembershipParams) error {
	_, err := q.db.ExecContext(ctx, deleteFamilyMembership, arg.FamilyID, arg.UserID)
	return err
}

const getFamilyMembership = `-- name: GetFamilyMembership :one
SELECT family_id, user_id, role, joined_at FROM family_memberships WHERE family_id = ? AND user_id = ?
`

type GetFamilyMembershipParams struct {
	FamilyID *string `json:"family_id"`
	UserID   *string `json:"user_id"`
}

func (q *Queries) GetFamilyMembership(ctx context.Context, arg GetFamilyMembershipParams) (*FamilyMembership, error) {
	row := q.db.QueryRowContext(ctx, getFamilyMembership, arg.FamilyID, arg.UserID)
	var i FamilyMembership
	err := row.Scan(
		&i.FamilyID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return &i, err
}

const getUserFamilyInfo = `-- name: GetUserFamilyInfo :one
SELECT family_id, role FROM family_memberships WHERE user_id = ?
`

type GetUserFamilyInfoRow struct {
	FamilyID *string `json:"family_id"`
	Role     string  `json:"role"`
}

func (q *Queries) GetUserFamilyInfo(ctx context.Context, userID *string) (*GetUserFamilyInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getUserFamilyInfo, userID)
	var i GetUserFamilyInfoRow
	err := row.Scan(&i.FamilyID, &i.Role)
	return &i, err
}

const listFamilyMemberships = `-- name: ListFamilyMemberships :many
SELECT family_id, user_id, role, joined_at FROM family_memberships WHERE family_id = ?
`

func (q *Queries) ListFamilyMemberships(ctx context.Context, familyID *string) ([]*FamilyMembership, error) {
	rows, err := q.db.QueryContext(ctx, listFamilyMemberships, familyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FamilyMembership{}
	for rows.Next() {
		var i FamilyMembership
		if err := rows.Scan(
			&i.FamilyID,
			&i.UserID,
			&i.Role,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserMemberships = `-- name: ListUserMemberships :many
SELECT family_id, user_id, role, joined_at FROM family_memberships WHERE user_id = ?
`

func (q *Queries) ListUserMemberships(ctx context.Context, userID *string) ([]*FamilyMembership, error) {
	rows, err := q.db.QueryContext(ctx, listUserMemberships, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FamilyMembership{}
	for rows.Next() {
		var i FamilyMembership
		if err := rows.Scan(
			&i.FamilyID,
			&i.UserID,
			&i.Role,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFamilyMembershipRole = `-- name: UpdateFamilyMembershipRole :one
UPDATE family_memberships 
SET role = ?
WHERE family_id = ? AND user_id = ?
RETURNING family_id, user_id, role, joined_at
`

type UpdateFamilyMembershipRoleParams struct {
	Role     string  `json:"role"`
	FamilyID *string `json:"family_id"`
	UserID   *string `json:"user_id"`
}

func (q *Queries) UpdateFamilyMembershipRole(ctx context.Context, arg UpdateFamilyMembershipRoleParams) (*FamilyMembership, error) {
	row := q.db.QueryRowContext(ctx, updateFamilyMembershipRole, arg.Role, arg.FamilyID, arg.UserID)
	var i FamilyMembership
	err := row.Scan(
		&i.FamilyID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return &i, err
}
