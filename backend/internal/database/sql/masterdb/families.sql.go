// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: families.sql

package masterdb

import (
	"context"
	"time"
)

const createFamily = `-- name: CreateFamily :one
INSERT INTO families (id, name, invite_code, database_url, manager_id, schema_version, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, invite_code, database_url, manager_id, schema_version, created_at, updated_at
`

type CreateFamilyParams struct {
	ID            string    `json:"id"`
	Name          string    `json:"name"`
	InviteCode    string    `json:"invite_code"`
	DatabaseUrl   string    `json:"database_url"`
	ManagerID     string    `json:"manager_id"`
	SchemaVersion *int64    `json:"schema_version"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) CreateFamily(ctx context.Context, arg CreateFamilyParams) (*Family, error) {
	row := q.db.QueryRowContext(ctx, createFamily,
		arg.ID,
		arg.Name,
		arg.InviteCode,
		arg.DatabaseUrl,
		arg.ManagerID,
		arg.SchemaVersion,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InviteCode,
		&i.DatabaseUrl,
		&i.ManagerID,
		&i.SchemaVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteFamily = `-- name: DeleteFamily :exec
DELETE FROM families WHERE id = ?
`

func (q *Queries) DeleteFamily(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFamily, id)
	return err
}

const getFamilyByID = `-- name: GetFamilyByID :one
SELECT id, name, invite_code, database_url, manager_id, schema_version, created_at, updated_at FROM families WHERE id = ?
`

func (q *Queries) GetFamilyByID(ctx context.Context, id string) (*Family, error) {
	row := q.db.QueryRowContext(ctx, getFamilyByID, id)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InviteCode,
		&i.DatabaseUrl,
		&i.ManagerID,
		&i.SchemaVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getFamilyByInviteCode = `-- name: GetFamilyByInviteCode :one
SELECT id, name, invite_code, database_url, manager_id, schema_version, created_at, updated_at FROM families WHERE invite_code = ?
`

func (q *Queries) GetFamilyByInviteCode(ctx context.Context, inviteCode string) (*Family, error) {
	row := q.db.QueryRowContext(ctx, getFamilyByInviteCode, inviteCode)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InviteCode,
		&i.DatabaseUrl,
		&i.ManagerID,
		&i.SchemaVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateFamily = `-- name: UpdateFamily :one
UPDATE families 
SET name = ?, database_url = ?, schema_version = ?, updated_at = ?
WHERE id = ?
RETURNING id, name, invite_code, database_url, manager_id, schema_version, created_at, updated_at
`

type UpdateFamilyParams struct {
	Name          string    `json:"name"`
	DatabaseUrl   string    `json:"database_url"`
	SchemaVersion *int64    `json:"schema_version"`
	UpdatedAt     time.Time `json:"updated_at"`
	ID            string    `json:"id"`
}

func (q *Queries) UpdateFamily(ctx context.Context, arg UpdateFamilyParams) (*Family, error) {
	row := q.db.QueryRowContext(ctx, updateFamily,
		arg.Name,
		arg.DatabaseUrl,
		arg.SchemaVersion,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Family
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InviteCode,
		&i.DatabaseUrl,
		&i.ManagerID,
		&i.SchemaVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
