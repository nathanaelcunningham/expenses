// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: expense/v1/expense.proto

package expensev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "expenses-backend/pkg/expense/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExpenseServiceName is the fully-qualified name of the ExpenseService service.
	ExpenseServiceName = "expense.v1.ExpenseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExpenseServiceCreateExpenseProcedure is the fully-qualified name of the ExpenseService's
	// CreateExpense RPC.
	ExpenseServiceCreateExpenseProcedure = "/expense.v1.ExpenseService/CreateExpense"
	// ExpenseServiceGetExpenseProcedure is the fully-qualified name of the ExpenseService's GetExpense
	// RPC.
	ExpenseServiceGetExpenseProcedure = "/expense.v1.ExpenseService/GetExpense"
	// ExpenseServiceUpdateExpenseProcedure is the fully-qualified name of the ExpenseService's
	// UpdateExpense RPC.
	ExpenseServiceUpdateExpenseProcedure = "/expense.v1.ExpenseService/UpdateExpense"
	// ExpenseServiceDeleteExpenseProcedure is the fully-qualified name of the ExpenseService's
	// DeleteExpense RPC.
	ExpenseServiceDeleteExpenseProcedure = "/expense.v1.ExpenseService/DeleteExpense"
	// ExpenseServiceListExpensesProcedure is the fully-qualified name of the ExpenseService's
	// ListExpenses RPC.
	ExpenseServiceListExpensesProcedure = "/expense.v1.ExpenseService/ListExpenses"
)

// ExpenseServiceClient is a client for the expense.v1.ExpenseService service.
type ExpenseServiceClient interface {
	CreateExpense(context.Context, *connect.Request[v1.CreateExpenseRequest]) (*connect.Response[v1.CreateExpenseResponse], error)
	GetExpense(context.Context, *connect.Request[v1.GetExpenseRequest]) (*connect.Response[v1.GetExpenseResponse], error)
	UpdateExpense(context.Context, *connect.Request[v1.UpdateExpenseRequest]) (*connect.Response[v1.UpdateExpenseResponse], error)
	DeleteExpense(context.Context, *connect.Request[v1.DeleteExpenseRequest]) (*connect.Response[v1.DeleteExpenseResponse], error)
	ListExpenses(context.Context, *connect.Request[v1.ListExpensesRequest]) (*connect.Response[v1.ListExpensesResponse], error)
}

// NewExpenseServiceClient constructs a client for the expense.v1.ExpenseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExpenseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExpenseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	expenseServiceMethods := v1.File_expense_v1_expense_proto.Services().ByName("ExpenseService").Methods()
	return &expenseServiceClient{
		createExpense: connect.NewClient[v1.CreateExpenseRequest, v1.CreateExpenseResponse](
			httpClient,
			baseURL+ExpenseServiceCreateExpenseProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("CreateExpense")),
			connect.WithClientOptions(opts...),
		),
		getExpense: connect.NewClient[v1.GetExpenseRequest, v1.GetExpenseResponse](
			httpClient,
			baseURL+ExpenseServiceGetExpenseProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("GetExpense")),
			connect.WithClientOptions(opts...),
		),
		updateExpense: connect.NewClient[v1.UpdateExpenseRequest, v1.UpdateExpenseResponse](
			httpClient,
			baseURL+ExpenseServiceUpdateExpenseProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("UpdateExpense")),
			connect.WithClientOptions(opts...),
		),
		deleteExpense: connect.NewClient[v1.DeleteExpenseRequest, v1.DeleteExpenseResponse](
			httpClient,
			baseURL+ExpenseServiceDeleteExpenseProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("DeleteExpense")),
			connect.WithClientOptions(opts...),
		),
		listExpenses: connect.NewClient[v1.ListExpensesRequest, v1.ListExpensesResponse](
			httpClient,
			baseURL+ExpenseServiceListExpensesProcedure,
			connect.WithSchema(expenseServiceMethods.ByName("ListExpenses")),
			connect.WithClientOptions(opts...),
		),
	}
}

// expenseServiceClient implements ExpenseServiceClient.
type expenseServiceClient struct {
	createExpense *connect.Client[v1.CreateExpenseRequest, v1.CreateExpenseResponse]
	getExpense    *connect.Client[v1.GetExpenseRequest, v1.GetExpenseResponse]
	updateExpense *connect.Client[v1.UpdateExpenseRequest, v1.UpdateExpenseResponse]
	deleteExpense *connect.Client[v1.DeleteExpenseRequest, v1.DeleteExpenseResponse]
	listExpenses  *connect.Client[v1.ListExpensesRequest, v1.ListExpensesResponse]
}

// CreateExpense calls expense.v1.ExpenseService.CreateExpense.
func (c *expenseServiceClient) CreateExpense(ctx context.Context, req *connect.Request[v1.CreateExpenseRequest]) (*connect.Response[v1.CreateExpenseResponse], error) {
	return c.createExpense.CallUnary(ctx, req)
}

// GetExpense calls expense.v1.ExpenseService.GetExpense.
func (c *expenseServiceClient) GetExpense(ctx context.Context, req *connect.Request[v1.GetExpenseRequest]) (*connect.Response[v1.GetExpenseResponse], error) {
	return c.getExpense.CallUnary(ctx, req)
}

// UpdateExpense calls expense.v1.ExpenseService.UpdateExpense.
func (c *expenseServiceClient) UpdateExpense(ctx context.Context, req *connect.Request[v1.UpdateExpenseRequest]) (*connect.Response[v1.UpdateExpenseResponse], error) {
	return c.updateExpense.CallUnary(ctx, req)
}

// DeleteExpense calls expense.v1.ExpenseService.DeleteExpense.
func (c *expenseServiceClient) DeleteExpense(ctx context.Context, req *connect.Request[v1.DeleteExpenseRequest]) (*connect.Response[v1.DeleteExpenseResponse], error) {
	return c.deleteExpense.CallUnary(ctx, req)
}

// ListExpenses calls expense.v1.ExpenseService.ListExpenses.
func (c *expenseServiceClient) ListExpenses(ctx context.Context, req *connect.Request[v1.ListExpensesRequest]) (*connect.Response[v1.ListExpensesResponse], error) {
	return c.listExpenses.CallUnary(ctx, req)
}

// ExpenseServiceHandler is an implementation of the expense.v1.ExpenseService service.
type ExpenseServiceHandler interface {
	CreateExpense(context.Context, *connect.Request[v1.CreateExpenseRequest]) (*connect.Response[v1.CreateExpenseResponse], error)
	GetExpense(context.Context, *connect.Request[v1.GetExpenseRequest]) (*connect.Response[v1.GetExpenseResponse], error)
	UpdateExpense(context.Context, *connect.Request[v1.UpdateExpenseRequest]) (*connect.Response[v1.UpdateExpenseResponse], error)
	DeleteExpense(context.Context, *connect.Request[v1.DeleteExpenseRequest]) (*connect.Response[v1.DeleteExpenseResponse], error)
	ListExpenses(context.Context, *connect.Request[v1.ListExpensesRequest]) (*connect.Response[v1.ListExpensesResponse], error)
}

// NewExpenseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExpenseServiceHandler(svc ExpenseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	expenseServiceMethods := v1.File_expense_v1_expense_proto.Services().ByName("ExpenseService").Methods()
	expenseServiceCreateExpenseHandler := connect.NewUnaryHandler(
		ExpenseServiceCreateExpenseProcedure,
		svc.CreateExpense,
		connect.WithSchema(expenseServiceMethods.ByName("CreateExpense")),
		connect.WithHandlerOptions(opts...),
	)
	expenseServiceGetExpenseHandler := connect.NewUnaryHandler(
		ExpenseServiceGetExpenseProcedure,
		svc.GetExpense,
		connect.WithSchema(expenseServiceMethods.ByName("GetExpense")),
		connect.WithHandlerOptions(opts...),
	)
	expenseServiceUpdateExpenseHandler := connect.NewUnaryHandler(
		ExpenseServiceUpdateExpenseProcedure,
		svc.UpdateExpense,
		connect.WithSchema(expenseServiceMethods.ByName("UpdateExpense")),
		connect.WithHandlerOptions(opts...),
	)
	expenseServiceDeleteExpenseHandler := connect.NewUnaryHandler(
		ExpenseServiceDeleteExpenseProcedure,
		svc.DeleteExpense,
		connect.WithSchema(expenseServiceMethods.ByName("DeleteExpense")),
		connect.WithHandlerOptions(opts...),
	)
	expenseServiceListExpensesHandler := connect.NewUnaryHandler(
		ExpenseServiceListExpensesProcedure,
		svc.ListExpenses,
		connect.WithSchema(expenseServiceMethods.ByName("ListExpenses")),
		connect.WithHandlerOptions(opts...),
	)
	return "/expense.v1.ExpenseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExpenseServiceCreateExpenseProcedure:
			expenseServiceCreateExpenseHandler.ServeHTTP(w, r)
		case ExpenseServiceGetExpenseProcedure:
			expenseServiceGetExpenseHandler.ServeHTTP(w, r)
		case ExpenseServiceUpdateExpenseProcedure:
			expenseServiceUpdateExpenseHandler.ServeHTTP(w, r)
		case ExpenseServiceDeleteExpenseProcedure:
			expenseServiceDeleteExpenseHandler.ServeHTTP(w, r)
		case ExpenseServiceListExpensesProcedure:
			expenseServiceListExpensesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExpenseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExpenseServiceHandler struct{}

func (UnimplementedExpenseServiceHandler) CreateExpense(context.Context, *connect.Request[v1.CreateExpenseRequest]) (*connect.Response[v1.CreateExpenseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.CreateExpense is not implemented"))
}

func (UnimplementedExpenseServiceHandler) GetExpense(context.Context, *connect.Request[v1.GetExpenseRequest]) (*connect.Response[v1.GetExpenseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.GetExpense is not implemented"))
}

func (UnimplementedExpenseServiceHandler) UpdateExpense(context.Context, *connect.Request[v1.UpdateExpenseRequest]) (*connect.Response[v1.UpdateExpenseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.UpdateExpense is not implemented"))
}

func (UnimplementedExpenseServiceHandler) DeleteExpense(context.Context, *connect.Request[v1.DeleteExpenseRequest]) (*connect.Response[v1.DeleteExpenseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.DeleteExpense is not implemented"))
}

func (UnimplementedExpenseServiceHandler) ListExpenses(context.Context, *connect.Request[v1.ListExpensesRequest]) (*connect.Response[v1.ListExpensesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("expense.v1.ExpenseService.ListExpenses is not implemented"))
}
